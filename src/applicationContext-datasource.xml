<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-2.5.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd">
	<!-- 定义受环境影响易变的变量 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/jdbc_oracle.properties</value>
				<value>classpath*:/rmi.properties</value>
			</list>
		</property>
	</bean>
	<!-- 数据源配置,使用应用内的DBCP数据库连接池org.apache.commons.dbcp.BasicDataSource//com.mchange.v2.c3p0.ComboPooledDataSource -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
 		<!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="5"/>
 		<!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="30"/>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="5"/>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="480"/>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="5"/>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
  		属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
  		如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="0"/>
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="240"/>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="30"/>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
  			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
 			 获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="true"/>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
  		时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
		 等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="false"/>
    </bean>
	
	
	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>DataSource</value>
		</property>
	</bean>
	-->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref local="dataSource"></ref>
		</property>
	</bean>
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.generate_statistics">true</prop>
				
			</props>
		</property>
		<property name="annotatedClasses">
			<list>
				<value>com.cabletech.commons.tags.module.Dictionary</value>
			</list>
		</property> <!--基础数据 -->
		<property name="mappingResources">  
            <list>  
                <value>jbpm.repository.hbm.xml</value>  
                <value>jbpm.execution.hbm.xml</value>  
                <value>jbpm.history.hbm.xml</value>  
                <value>jbpm.task.hbm.xml</value>  
                <value>jbpm.identity.hbm.xml</value>  
			</list>
		</property>
		<property name="mappingLocations">  
			<list>
				<value>classpath*:**/*.hbm.xml</value>
				<value>classpath*:*.hbm.xml</value>
			</list>  
		</property> 
		
	</bean>

	<!-- 当dao层比较复杂时使用该simpleDao扩展dao层
	<bean id="simpleHibernateDao" class="com.cabletech.ctf.dao.SimpleHibernateDao">
		<property name="sessionFactory"  ref="sessionFactory"/>
	</bean> -->
	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 事务管理器配置,多数据源JTA事务-->
	<!--
		<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager or
		WebLogicJtaTransactionManager" />
	-->
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
 	<!-- 以AspectJ方式 定义 AOP
	<aop:aspectj-autoproxy/>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="find*" read-only="true" propagation="SUPPORTS" />
			<tx:method name="load*" read-only="true" propagation="SUPPORTS"/>
			<tx:method name="is*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="serviceOperation" expression="execution(* com.cabletech.**.service.**.*(..))" type="regex" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />
	</aop:config>
	 -->
	<!-- 供RMI客户端(Web调用)调用 
    
    <bean id="rmiSmProxyService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="http://${rmi.service.host}:${rmi.service.port}/${rmi.service.service}"/>
        <property name="serviceInterface" value="cabletech.sm.rmi.RmiSmProxyService"/>
	</bean>
	-->
	<bean id="rmiSmProxyService" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
        <property name="serviceUrl" value="http://${rmi.service.host}:${rmi.service.port}/${rmi.service.service}/SmProxyService"/>
        <property name="serviceInterface" value="cabletech.sm.rmi.RmiSmProxyService"/>
    </bean>
    
    <bean id="rmiTerminalService" class="org.springframework.remoting.caucho.HessianProxyFactoryBean">
        <property name="serviceUrl" value="http://${rmi.service.host}:${rmi.service.port}/${rmi.service.service}/TerminalService"/>
        <property name="serviceInterface" value="cabletech.business.service.RmiTerminalService"/>
	</bean>
	
</beans>